generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model AIFeature {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  publicationId Json?
  /// Field referred in an index, but found no data to define the type.
  userId        Json?

  @@index([userId, publicationId])
}

model Bookmark {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  publicationId Json?
  /// Field referred in an index, but found no data to define the type.
  userId        Json?

  @@index([userId, publicationId])
}

model Category {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  description String
  name        String @unique
  /// Field referred in an index, but found no data to define the type.
  parentId    Json?

  @@index([name, parentId])
}

model Chat {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  name Json?

  @@index([name])
}

model ChatMessage {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  chatId   Json?
  /// Field referred in an index, but found no data to define the type.
  senderId Json?

  @@index([senderId, chatId])
}

model ChatParticipant {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  chatId Json?
  /// Field referred in an index, but found no data to define the type.
  userId Json?

  @@index([userId, chatId])
}

model Collaboration {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  publicationId Json?
  /// Field referred in an index, but found no data to define the type.
  userId        Json?

  @@index([userId, publicationId])
}

model Comment {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  authorId      Json?
  /// Field referred in an index, but found no data to define the type.
  publicationId Json?

  @@index([authorId, publicationId])
}

model Event {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  hostId        Json?
  /// Field referred in an index, but found no data to define the type.
  publicationId Json?

  @@index([hostId, publicationId])
}

model EventMessage {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  eventId  Json?
  /// Field referred in an index, but found no data to define the type.
  senderId Json?

  @@index([senderId, eventId])
}

model EventParticipant {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  eventId Json?
  /// Field referred in an index, but found no data to define the type.
  userId  Json?

  @@index([userId, eventId])
}

model Notification {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  userId Json?

  @@index([userId])
}

model Publication {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  abstract   String
  authorId   String   @db.ObjectId
  categoryId String   @db.ObjectId
  citations  BigInt
  createdAt  DateTime @db.Date
  keywords   String[]
  language   String
  status     String
  title      String
  updatedAt  DateTime @db.Date
  views      BigInt
  visibility String

  @@index([authorId, categoryId])
}

model Review {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  publicationId Json?
  /// Field referred in an index, but found no data to define the type.
  reviewerId    Json?

  @@index([reviewerId, publicationId])
}

model Reward {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  publicationId Json?
  /// Field referred in an index, but found no data to define the type.
  reviewId      Json?
  /// Field referred in an index, but found no data to define the type.
  userId        Json?

  @@index([userId, publicationId, reviewId])
}

model Section {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  createdAt     DateTime @db.Date
  orderIndex    BigInt
  publicationId String   @db.ObjectId
  title         String
  type          String
  updatedAt     DateTime @db.Date

  @@index([publicationId, orderIndex])
}

model SectionFile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @db.Date
  publicId  String
  sectionId String   @db.ObjectId
  updatedAt DateTime @db.Date
  url       String

  @@index([sectionId])
}

model Token {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  userId        Json?  @unique
  /// Field referred in an index, but found no data to define the type.
  walletAddress Json?  @unique
}

model Version {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  publicationId Json?

  @@index([publicationId])
}

model profiles {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  bio                  String
  createdAt            DateTime @db.Date
  expertise            String[]
  firstName            String
  languages            String[]
  lastName             String
  linkedin             String
  profileImagePublicId String
  profileImageUrl      String
  updatedAt            DateTime @db.Date
  userId               String   @unique @db.ObjectId
}

model users {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @db.Date
  email           String   @unique
  isEmailVerified Boolean
  password        String
  refreshToken    String
  role            String
  updatedAt       DateTime @db.Date
}
